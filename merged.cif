alg bool a_ls_power = button_ls_power.on;
alg bool a_ss_power = button_ss_power.on;
alg bool a_feed_tray = button_feed_tray.on;
alg bool a_holder_opened = button_holder_opened.on;
event got_product;
alg bool s_pusher_is_up = pusher_ls.up and pusher_ss.up;
alg bool s_pusher_is_middle = pusher_ls.up and pusher_ss.down;
alg bool s_pusher_is_down = pusher_ls.down and pusher_ss.down;
alg bool s_tray1 = entering_tray.at_tray1;
alg bool s_tray2 = entering_tray.at_tray2;
automaton button_ls_power:
  uncontrollable u_press;
  alg string name = "a_ls_power";
  svgin id name event u_press file "trayTS.svg";
  location off:
    initial;
    edge u_press goto on;
  location on:
    edge u_press goto off;
end
automaton button_ss_power:
  uncontrollable u_press;
  alg string name = "a_ss_power";
  svgin id name event u_press file "trayTS.svg";
  location off:
    initial;
    edge u_press goto on;
  location on:
    edge u_press goto off;
end
automaton button_feed_tray:
  uncontrollable u_press;
  cont t = 0.0;
  alg string name = "a_feed_tray";
  svgin id name event u_press file "trayTS.svg";
  location off:
    initial;
    equation t' = 0.0;
    edge u_press goto on;
  location on:
    equation t' = 1.0;
    edge when t >= 0.5 do t := 0.0 goto off;
end
automaton button_holder_opened:
  uncontrollable u_press;
  alg string name = "a_holder_opened";
  svgin id name event u_press file "trayTS.svg";
  location off:
    initial;
    edge u_press goto on;
  location on:
    edge u_press goto off;
end
plant automaton pusher_ls:
  event on;
  event off;
  const real V_PUSHER = 10.0;
  const real Y_DOWN = 0.0;
  alg real Y_UP = -maximum;
  cont y = Y_DOWN;
  alg bool a_power = a_ls_power;
  alg real maximum = 15.0;
  location down:
    initial;
    equation y' = 0.0;
    edge when a_power goto moving_up;
  location moving_up:
    equation y' = -V_PUSHER;
    edge on when y <= Y_UP goto up;
    edge when not a_power goto moving_down;
  location moving_down:
    equation y' = V_PUSHER;
    edge off when y >= Y_DOWN goto down;
    edge when a_power goto moving_up;
  location up:
    equation y' = 0.0;
    edge when not a_power goto moving_down;
end
plant automaton pusher_ss:
  event on;
  event off;
  const real V_PUSHER = 10.0;
  const real Y_DOWN = 0.0;
  alg real Y_UP = -maximum;
  cont y = Y_DOWN;
  alg bool a_power = a_ss_power;
  alg real maximum = 3.5;
  location down:
    initial;
    equation y' = 0.0;
    edge when a_power goto moving_up;
  location moving_up:
    equation y' = -V_PUSHER;
    edge on when y <= Y_UP goto up;
    edge when not a_power goto moving_down;
  location moving_down:
    equation y' = V_PUSHER;
    edge off when y >= Y_DOWN goto down;
    edge when a_power goto moving_up;
  location up:
    equation y' = 0.0;
    edge when not a_power goto moving_down;
end
plant automaton pusher_tray:
  const real MAXX = 4.0;
  const real MINX = 0.0;
  const real VPUSH = 2.0;
  event exit;
  event new_product;
  cont y_product = 0.0 der v_product;
  disc bool has_prod = true;
  alg real v_product = if has_prod and (a_ls_power or a_ss_power) and y_product - 3.5 >= pusher_ls.y + pusher_ss.y: pusher_ls.y' + pusher_ss.y' else 0.0 end;
  location no_product:
    initial;
    edge got_product goto has_product;
  location has_product:
    edge exit when has_prod and pusher_ls.up and pusher_ss.up do y_product := 0.0, has_prod := false goto no_product;
    edge new_product when not has_prod and pusher_ls.down and pusher_ss.down do y_product := 0.0, has_prod := true;
end
plant automaton Conveyer1:
  event wait;
  const real T_DELTA = -1.0;
  const real T_DELAY = 2.0;
  cont t = T_DELAY;
  location idle:
    initial;
    equation t' = T_DELTA;
    edge wait when t <= 0 do t := T_DELAY goto waiting;
  location waiting:
    equation t' = 0.0;
    edge when a_feed_tray goto transfering;
  location transfering:
    equation t' = 0.0;
    edge when entering_tray.at_tray2 or entering_tray.hidden do t := T_DELAY goto idle;
end
plant automaton Conveyer2:
  location idle:
    initial;
    edge when Conveyer1.transfering goto transfering;
  location transfering:
    edge when entering_tray.at_tray2 goto idle;
end
plant automaton entering_tray:
  const real V = 10.0;
  cont x = 0.0;
  location hidden:
    initial;
    equation x' = 0.0;
    edge when Conveyer1.waiting goto at_tray1;
  location at_tray1:
    equation x' = 0.0;
    edge when a_feed_tray goto transfering;
  location transfering:
    equation x' = V;
    edge got_product when x >= 57 goto at_tray2;
  location at_tray2:
    equation x' = 0.0;
    edge when pusher_tray.has_prod do x := 0.0 goto hidden;
end
plant automaton holders:
  location closed:
    initial;
    edge when a_holder_opened goto opened;
  location opened:
    edge when not a_holder_opened goto closed;
end
svgout id "a_ls_power" attr "fill" value if a_ls_power: "green" else "red" end file "trayTS.svg";
svgout id "a_ss_power" attr "fill" value if a_ss_power: "green" else "red" end file "trayTS.svg";
svgout id "pusherLongStroke" attr "transform" value fmt("translate(0,%s)", scale(pusher_ls.y, 0, 30, 0, 30)) file "trayTS.svg";
svgout id "pusherShortStroke" attr "transform" value fmt("translate(0,%s)", scale(pusher_ss.y, 0, 5, 0, 5)) file "trayTS.svg";
svgout id "pusher-tray" attr "transform" value fmt("translate(0,%s)", scale(pusher_tray.y_product, 0, 35, 0, 35)) file "trayTS.svg";
svgout id "pusher-tray" attr "display" value if pusher_tray.has_product: "inline" else "none" end file "trayTS.svg";
svgout id "input-tray" attr "display" value if not entering_tray.hidden: "inline" else "none" end file "trayTS.svg";
svgout id "a_feed_tray" attr "fill" value if a_feed_tray: "green" else "red" end file "trayTS.svg";
svgout id "input-tray" attr "transform" value fmt("translate(%s,0)", entering_tray.x) file "trayTS.svg";
svgout id "a_holder_opened" attr "fill" value if holders.opened: "green" else "red" end file "trayTS.svg";
svgout id "holder1" attr "transform" value if holders.opened: fmt("rotate(%s, 70.59, 60.46)", 20) else fmt("rotate(%s, 70.59, 60.46)", 0) end file "trayTS.svg";
svgout id "holder2" attr "transform" value if holders.opened: fmt("rotate(%s, 123.73, 60.46)", -20) else fmt("rotate(%s, 123.73, 60.46)", 0) end file "trayTS.svg";
